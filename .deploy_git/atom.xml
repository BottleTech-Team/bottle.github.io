<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BottleTech.Team</title>
  
  <subtitle>CODING...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haina.xgeeklab.com/"/>
  <updated>2019-10-16T13:30:35.371Z</updated>
  <id>https://haina.xgeeklab.com/</id>
  
  <author>
    <name>BottleTech.Team</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决JPEG图片横着显示的问题</title>
    <link href="https://haina.xgeeklab.com/2019/10/16/7ca7c8ccb2f3df66edbfdeb35891485c/"/>
    <id>https://haina.xgeeklab.com/2019/10/16/7ca7c8ccb2f3df66edbfdeb35891485c/</id>
    <published>2019-10-16T13:30:35.371Z</published>
    <updated>2019-10-16T13:30:35.371Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者： 张云峰</p></blockquote><p>背景： 一些jpeg图片，在pc中用图片查看器打开是正的，但是放到浏览器中，就横着了。今天，我们就来解决这个问题。</p><h3 id="为什么JEPG图片会横着显示？"><a href="#为什么JEPG图片会横着显示？" class="headerlink" title="为什么JEPG图片会横着显示？"></a>为什么JEPG图片会横着显示？</h3><p>首先，我们看一个github上的一个关于此问题的issue：<br><a href="https://github.com/GoogleChromeLabs/squoosh/issues/299" target="_blank" rel="noopener">https://github.com/GoogleChromeLabs/squoosh/issues/299</a><br>这个问题讨论的是chrome显示jpeg图片，旋转了90度的问题。<br>为什么会旋转呢？因为JEPG图片的EXIF data中有一个控制旋转的属性<strong>Orientation</strong>，但是有一些应用程序显示图片的时候会忽略这个属性，就导致图片在一些应用程序中显示出来和原本的方向不一致。</p><p>这里有一张JEPG图片的EXIF数据（可以看到第一个属性就是 Orientation）：<br><img src="https://res.cloudinary.com/zayfen/image/upload/v1570695926/img/ibvnab25sqxnz4ahapu6.png" alt="JPEG图片的EXIF数据"></p><h3 id="让图片永远都正着显示"><a href="#让图片永远都正着显示" class="headerlink" title="让图片永远都正着显示"></a>让图片永远都正着显示</h3><p>因为 JPEG的 <strong>Orientation</strong> 属性被忽略了，那么当检测到图片Orientation的值表示需要旋转的时候，我们就主动将JPEEG图片旋转，并且改正或者去掉新图片的<strong>Orientation</strong> 字段。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用exif-js 这个库去获取jpeg图片的EXIF元数据 (https://github.com/exif-js/exif-js)</span></span><br><span class="line"><span class="comment">// 旋转图片的工具,(旋转之后的图片的EXIF data被移除)</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> * <span class="keyword">as</span> EXIF <span class="keyword">from</span> <span class="string">'exif-js'</span>  <span class="comment">// npm install exif-js</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// &lt;img id="show-image" /&gt;,用来显示旋转后的图像</span></span><br><span class="line"> <span class="keyword">var</span> image = <span class="built_in">document</span>.getElementById(<span class="string">'show-image'</span>) </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// &lt;input id="image-input" type="file" name="imag" /&gt;</span></span><br><span class="line"> <span class="keyword">var</span> imageInput = <span class="built_in">document</span>.getElementById(<span class="string">'image-input'</span>) </span><br><span class="line"> imageInput.onchange = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"onchange: ..."</span>)</span><br><span class="line">   <span class="keyword">let</span> file = evt.target.files[<span class="number">0</span>]</span><br><span class="line">   rotateImage(file).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">     image.src = data.base64</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fileToBinary</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 读取图片数据</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">        reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.result <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>) &#123;</span><br><span class="line">            <span class="comment">// resolve(new Uint8Array(reader.result))</span></span><br><span class="line">            resolve(<span class="keyword">this</span>.result)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reader.readAsArrayBuffer(file)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Blob 对象以fileName文件名下载下来</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">downloadBlob</span> (<span class="params">blob, fileName</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">      <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">      link.href = url</span><br><span class="line">      link.setAttribute(<span class="string">'download'</span>, fileName)</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(link)</span><br><span class="line">      link.click()</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(link) <span class="comment">// 下载完成移除元素</span></span><br><span class="line">      <span class="built_in">window</span>.URL.revokeObjectURL(url) <span class="comment">// 释放掉blob对象      </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rotateImage</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fileToBinary(file).then(<span class="function">(<span class="params">binaryFile</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> meta = EXIF.readFromBinaryFile(binaryFile)</span><br><span class="line">          <span class="keyword">let</span> orientation = meta.Orientation</span><br><span class="line">          <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line">          <span class="keyword">let</span> rotationMap = &#123; <span class="number">3</span>: <span class="number">180</span>, <span class="number">6</span>: <span class="number">90</span>, <span class="number">8</span>: <span class="number">270</span> &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 不需要旋转</span></span><br><span class="line">          <span class="keyword">if</span> (meta === <span class="literal">false</span> || !rotationMap[orientation]) &#123;</span><br><span class="line">            formData.append(<span class="string">'file'</span>, file, <span class="string">'face.jpeg'</span>)</span><br><span class="line">            <span class="keyword">return</span> resolve(&#123; <span class="attr">base64</span>: <span class="string">''</span>, <span class="attr">formData</span>: formData, <span class="attr">rotated</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> rotationDegree = <span class="number">0</span></span><br><span class="line">          <span class="keyword">let</span> targetWidth = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">          rotationDegree = rotationMap[orientation] || <span class="number">0</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> image = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">          image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">            <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> rate = <span class="built_in">Math</span>.min(targetWidth / image.width, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">let</span> imageWidth = image.width * rate</span><br><span class="line">            <span class="keyword">let</span> imageHeight = image.height * rate</span><br><span class="line">            <span class="keyword">if</span> (rotationDegree === <span class="number">90</span> || rotationDegree === <span class="number">270</span>) &#123;</span><br><span class="line">              canvas.width = imageHeight</span><br><span class="line">              canvas.height = imageWidth</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              canvas.width = image.width</span><br><span class="line">              canvas.height = image.height</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ctx.fillStyle = <span class="string">'rgba(255, 255, 255, 0)'</span></span><br><span class="line"></span><br><span class="line">            ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line"></span><br><span class="line">            ctx.save()</span><br><span class="line">            ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">            ctx.translate(canvas.width / <span class="number">2</span>, canvas.height / <span class="number">2</span>)</span><br><span class="line">            ctx.rotate(rotationDegree * <span class="built_in">Math</span>.PI / <span class="number">180</span>)</span><br><span class="line">            <span class="keyword">if</span> (rotationDegree === <span class="number">90</span> || rotationDegree === <span class="number">270</span>) &#123;</span><br><span class="line">              ctx.drawImage(image, -canvas.height / <span class="number">2</span>, -canvas.width / <span class="number">2</span> + (canvas.width - imageHeight) / <span class="number">2</span>, imageWidth, imageHeight)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              ctx.drawImage(image, -canvas.width / <span class="number">2</span>, -canvas.height / <span class="number">2</span>, imageWidth, imageHeight)</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.restore()</span><br><span class="line"></span><br><span class="line">            canvas.toBlob(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">              formData.append(<span class="string">'file'</span>, blob, <span class="string">'face.jpeg'</span>)</span><br><span class="line">              <span class="keyword">let</span> base64 = canvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">0.8</span>)</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'rotated image  blob: '</span>, blob)</span><br><span class="line">              <span class="comment">// downloadBlob(blob, '123.jpg')  // 下载图片</span></span><br><span class="line">              resolve(&#123; <span class="attr">base64</span>: base64, <span class="attr">rotated</span>: <span class="literal">true</span>, <span class="attr">formData</span>: formData &#125;)</span><br><span class="line">            &#125;, <span class="string">'image/jpeg'</span>, <span class="number">0.8</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          image.src = URL.createObjectURL(file)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>例子效果：</strong><br><img src="https://res.cloudinary.com/zayfen/image/upload/v1571232577/img/y8zxcjibljhul5nr1cab.png" alt="旋转图片的例子"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作者： 张云峰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;背景： 一些jpeg图片，在pc中用图片查看器打开是正的，但是放到浏览器中，就横着了。今天，我们就来解决这个问题。&lt;/p&gt;
&lt;h3 id=&quot;为什么JEPG图片会横着显示？&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="web" scheme="https://haina.xgeeklab.com/categories/web/"/>
    
    
      <category term="canvas" scheme="https://haina.xgeeklab.com/tags/canvas/"/>
    
      <category term="jpeg" scheme="https://haina.xgeeklab.com/tags/jpeg/"/>
    
  </entry>
  
  <entry>
    <title>小程序中解决图片旋转问题</title>
    <link href="https://haina.xgeeklab.com/2019/10/16/747cef8ba16bace6dda520252fd1347e/"/>
    <id>https://haina.xgeeklab.com/2019/10/16/747cef8ba16bace6dda520252fd1347e/</id>
    <published>2019-10-16T13:23:22.338Z</published>
    <updated>2019-10-16T13:23:22.338Z</updated>
    
    <content type="html"><![CDATA[<p>在一些相机设备中因手持方向的原因导致图片会有一个旋转角度，在图片加载后旋转角度被忽略了，导致图片看过去是旋转的，<br>小程序中不需要借助任何工具获取图片信息，通过wx.getImageInfo()获取orientation<br>orientation值有四个<br><img src="https://res.cloudinary.com/dazyprrpl/image/upload/v1571231664/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20191016211409_wvxen1.png" alt="image"></p><ol><li>up    不需要旋转</li><li>down  旋转180度</li><li>left  旋转270度</li><li>right 旋转90度</li></ol><p>小程序中处理图片旋转条件</p><ol><li>需要在wxml中添加canvas组件</li><li>设置canvas-id属性</li><li>为了让这个canvas不显示，设置绝对定位并定位在显示区外<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>  <span class="attr">catchtap</span>=<span class="string">"onUploadAction"</span>&gt;</span>选择图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>旋转前<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"rotateBefore"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;rotateBefore&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"aspectFit"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>旋转后<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"rotateAfter"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;rotateAfter&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"aspectFit"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 请注意canvas组件属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">canvas-id</span>=<span class="string">"my-canvas"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"width:&#123;&#123;canvasWidth&#125;&#125;px;height:&#123;&#123;canvasHeight&#125;&#125;px;position:absolute;top:-2000%;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/upload-img/index.js</span></span><br><span class="line">Component(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    rotateBefore: <span class="literal">null</span>,</span><br><span class="line">    rotateAfter: <span class="literal">null</span>,</span><br><span class="line">    canvasWidth:<span class="literal">null</span>,</span><br><span class="line">    canvasHeight:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onUploadAction(e) &#123; <span class="comment">// 选择图片</span></span><br><span class="line">      <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">      wx.showActionSheet(&#123;</span><br><span class="line">        itemList: [<span class="string">'从相册中选择'</span>, <span class="string">'拍照'</span>], <span class="comment">// 选择方式</span></span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!res.cancel) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.tapIndex == <span class="number">0</span>) &#123;</span><br><span class="line">              _this.chooseWxImage(<span class="string">'album'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.tapIndex == <span class="number">1</span>) &#123;</span><br><span class="line">              _this.chooseWxImage(<span class="string">'camera'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    chooseWxImage(type) &#123;</span><br><span class="line">      <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">      wx.chooseImage(&#123;</span><br><span class="line">        sizeType: [<span class="string">'original'</span>, <span class="string">'compressed'</span>],</span><br><span class="line">        sourceType: [type],</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> tempFilePaths = result.tempFilePaths <span class="comment">// 获得文件地址</span></span><br><span class="line">          <span class="comment">//  旋转前</span></span><br><span class="line">          _this.setData(&#123;</span><br><span class="line">            rotateBefore: tempFilePaths[<span class="number">0</span>] <span class="comment">// 设置旋转前的image</span></span><br><span class="line">          &#125;)</span><br><span class="line">          wx.getImageInfo(&#123; <span class="comment">// 获取图片的信息</span></span><br><span class="line">            src: tempFilePaths[<span class="number">0</span>],</span><br><span class="line">            success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> canvasContext = wx.createCanvasContext(<span class="string">'my-canvas'</span>, _this)</span><br><span class="line">              <span class="comment">// 下面按比例写死宽度高度是为了压缩图片提升上传速度，可按实际需求更改</span></span><br><span class="line">              <span class="keyword">let</span> rate = res.height / res.width </span><br><span class="line">              <span class="keyword">let</span> width = <span class="number">500</span></span><br><span class="line">              <span class="keyword">let</span> height = <span class="number">500</span> * rate</span><br><span class="line">              <span class="keyword">switch</span> (res.orientation) &#123; <span class="comment">// 根据orientation值处理图片</span></span><br><span class="line">                <span class="keyword">case</span> (<span class="string">"up"</span>):</span><br><span class="line">                  <span class="comment">//不需要旋转</span></span><br><span class="line">                  _this.setData(&#123;</span><br><span class="line">                    canvasWidth: width,</span><br><span class="line">                    canvasHeight: height,</span><br><span class="line">                  &#125;)</span><br><span class="line">                  canvasContext.drawImage(tempFilePaths[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> (<span class="string">"down"</span>):</span><br><span class="line">                  <span class="comment">//需要旋转180度</span></span><br><span class="line">                  _this.setData(&#123;</span><br><span class="line">                    canvasWidth: width,</span><br><span class="line">                    canvasHeight: height,</span><br><span class="line">                  &#125;)</span><br><span class="line">                  canvasContext.translate(width / <span class="number">2</span>, height / <span class="number">2</span>)</span><br><span class="line">                  canvasContext.rotate(<span class="number">180</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>)</span><br><span class="line">                  canvasContext.drawImage(tempFilePaths[<span class="number">0</span>], -width / <span class="number">2</span>, -height / <span class="number">2</span>, width, height);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> (<span class="string">"left"</span>):</span><br><span class="line">                  <span class="comment">//顺时针旋转270度</span></span><br><span class="line">                  _this.setData(&#123;</span><br><span class="line">                    canvasWidth: height,</span><br><span class="line">                    canvasHeight: width,</span><br><span class="line">                  &#125;)</span><br><span class="line">                  canvasContext.translate(height / <span class="number">2</span>, width / <span class="number">2</span>)</span><br><span class="line">                  canvasContext.rotate(<span class="number">270</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>)</span><br><span class="line">                  canvasContext.drawImage(tempFilePaths[<span class="number">0</span>], -width / <span class="number">2</span>, -height / <span class="number">2</span>, width, height);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> (<span class="string">"right"</span>):</span><br><span class="line">                  <span class="comment">//顺时针旋转90度</span></span><br><span class="line">                  _this.setData(&#123;</span><br><span class="line">                    canvasWidth: height,</span><br><span class="line">                    canvasHeight: width,</span><br><span class="line">                  &#125;)</span><br><span class="line">                  canvasContext.translate(height / <span class="number">2</span>, width / <span class="number">2</span>)</span><br><span class="line">                  canvasContext.rotate(<span class="number">90</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>)</span><br><span class="line">                  canvasContext.drawImage(tempFilePaths[<span class="number">0</span>], -width / <span class="number">2</span>, -height / <span class="number">2</span>, width, height)</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              canvasContext.draw(<span class="literal">false</span>, () =&gt; &#123; <span class="comment">// 将之前在绘图上下文中的描述（路径、变形、样式）画到 canvas 中</span></span><br><span class="line">                wx.canvasToTempFilePath(&#123; <span class="comment">// 把当前画布指定区域的内容导出生成指定大小的图片。在 draw() 回调里调用该方法才能保证图片导出成功。</span></span><br><span class="line">                  canvasId: <span class="string">'my-canvas'</span>,</span><br><span class="line">                  success(res) &#123;</span><br><span class="line">                    <span class="keyword">let</span> filePath = res.tempFilePath</span><br><span class="line">                    _this.setData(&#123;</span><br><span class="line">                      rotateAfter: filePath</span><br><span class="line">                    &#125;)</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;, _this)<span class="comment">// 在自定义组件下，当前组件实例的this，以操作组件内 canvas 组件</span></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果展示<br><img src="https://res.cloudinary.com/dazyprrpl/image/upload/v1571231035/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20191016202155_q8crda.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在一些相机设备中因手持方向的原因导致图片会有一个旋转角度，在图片加载后旋转角度被忽略了，导致图片看过去是旋转的，&lt;br&gt;小程序中不需要借助任何工具获取图片信息，通过wx.getImageInfo()获取orientation&lt;br&gt;orientation值有四个&lt;br&gt;&lt;i
      
    
    </summary>
    
      <category term="小程序" scheme="https://haina.xgeeklab.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://haina.xgeeklab.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="canvas" scheme="https://haina.xgeeklab.com/tags/canvas/"/>
    
      <category term="图片旋转" scheme="https://haina.xgeeklab.com/tags/%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>解决图片在浏览器中旋转问题</title>
    <link href="https://haina.xgeeklab.com/2019/10/16/f03d76023fa3812362fb612b07434bdb/"/>
    <id>https://haina.xgeeklab.com/2019/10/16/f03d76023fa3812362fb612b07434bdb/</id>
    <published>2019-10-16T07:59:09.358Z</published>
    <updated>2019-10-16T07:59:09.358Z</updated>
    
    <content type="html"><![CDATA[<p>在开始之前需要了解为什么在浏览器中图片会自动旋转，在一些相机设备中因手持方向的原因导致图片会有一个旋转角度，在浏览器中旋转角度被忽略了，导致图片看过去是旋转的</p><p>图片旋转如下</p><p><img src="https://res.cloudinary.com/dazyprrpl/image/upload/v1571208163/VGsAj_wwypdb.gif" alt="image"></p><p>如图<br>1 正常<br>6 旋转90°<br>8 旋转-90°<br>3 旋转180°</p><p>既然知道了图片需要旋转的角度，那么只需要通过canvas旋转并绘制图片，然后将图片输出就行，这里需要借助<a href="https://github.com/exif-js/exif-js" target="_blank" rel="noopener">exif-js</a>获取图片的源信息，只需要判断 Orientation 然后旋转对应的角度，废话不多说上代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line">            padding-left: 300px;</span><br><span class="line">        &#125;</span><br><span class="line">        .preivew &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .preivew2 &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里采用cdn形式引入exif --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/exif-js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>转换前<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"preivew"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>转换后<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"preivew2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 添加input事件监听</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>).addEventListener(<span class="string">'change'</span>, onFileChange)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">onFileChange</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> file = event.target.files[<span class="number">0</span>] <span class="comment">// 得到file对象</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">'.preivew'</span>).src = URL.createObjectURL(file) <span class="comment">// 转换前的img</span></span></span><br><span class="line"><span class="javascript">        rotateImg(file).then(<span class="function"><span class="params">blob</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(<span class="string">'.preivew2'</span>).src = URL.createObjectURL(blob) <span class="comment">// 转换后的img</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 上传获取到的blob对象</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// let fromData = new fromData()</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// fromData.appendChild('file',blob)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// $.ajax(&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     type: "method",</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     url: "url",</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     data: "data",</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     dataType: "dataType",</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     success: function (response) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;);</span></span></span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             *这里把转换后的blob对象下载在电脑上查看，实际开发中忽略</span><br><span class="line">             */</span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span></span><br><span class="line">            link.href = url</span><br><span class="line"><span class="javascript">            link.setAttribute(<span class="string">'download'</span>, <span class="string">'AAAAAA'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.appendChild(link)</span></span><br><span class="line">            link.click()</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.removeChild(link)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.URL.revokeObjectURL(url)</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">rotateImg</span>(<span class="params">file</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">            img.src = <span class="built_in">window</span>.URL.createObjectURL(file);</span></span><br><span class="line"><span class="javascript">            img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 获取图片源数据 上面已经引入EXIF全局变量</span></span></span><br><span class="line"><span class="javascript">                EXIF.getData(img, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 获取图片orientation值</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(EXIF.getAllTags(<span class="keyword">this</span>))</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> orientation = EXIF.getTag(<span class="keyword">this</span>, <span class="string">"Orientation"</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">switch</span> (orientation) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// 旋转180°</span></span></span><br><span class="line">                            canvas.width = img.width;</span><br><span class="line">                            canvas.height = img.height;</span><br><span class="line"><span class="javascript">                            ctx.rotate((<span class="number">180</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span></span><br><span class="line">                            ctx.drawImage(img, -img.width, -img.height, img.width, img.height);</span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="number">6</span>: <span class="comment">// 旋转90°</span></span></span><br><span class="line">                            canvas.width = img.height;</span><br><span class="line">                            canvas.height = img.width;</span><br><span class="line"><span class="javascript">                            ctx.rotate((<span class="number">90</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span></span><br><span class="line">                            ctx.drawImage(img, 0, -img.height, img.width, img.height);</span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="number">8</span>: <span class="comment">// 旋转-90°</span></span></span><br><span class="line">                            canvas.width = img.height;</span><br><span class="line">                            canvas.height = img.width;</span><br><span class="line"><span class="javascript">                            ctx.rotate((<span class="number">-90</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span></span><br><span class="line">                            ctx.drawImage(img, -img.width, 0, img.width, img.height);</span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">default</span>: <span class="comment">// 没有源信息的图片和正常的图片是不需要旋转的</span></span></span><br><span class="line">                            canvas.width = img.width;</span><br><span class="line">                            canvas.height = img.height;</span><br><span class="line">                            ctx.drawImage(img, 0, 0, img.width, img.height);</span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    <span class="comment">// 处理完返回 (这里返回都是被压缩的，根据实际情况更改正常的图片处理方式)</span></span></span><br><span class="line"><span class="javascript">                    canvas.toBlob(<span class="function"><span class="params">file</span> =&gt;</span> resolve(file), <span class="string">'image/jpeg'</span>, <span class="number">0.92</span>)</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看看效果<br><img src="https://res.cloudinary.com/dazyprrpl/image/upload/v1571212575/aaa_wc5kju.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开始之前需要了解为什么在浏览器中图片会自动旋转，在一些相机设备中因手持方向的原因导致图片会有一个旋转角度，在浏览器中旋转角度被忽略了，导致图片看过去是旋转的&lt;/p&gt;
&lt;p&gt;图片旋转如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com
      
    
    </summary>
    
      <category term="canvas" scheme="https://haina.xgeeklab.com/categories/canvas/"/>
    
      <category term="exif" scheme="https://haina.xgeeklab.com/categories/canvas/exif/"/>
    
    
      <category term="图片旋转" scheme="https://haina.xgeeklab.com/tags/%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>web移动端支付</title>
    <link href="https://haina.xgeeklab.com/2019/10/16/affcba87eb68badaf0269c3cb8dd509d/"/>
    <id>https://haina.xgeeklab.com/2019/10/16/affcba87eb68badaf0269c3cb8dd509d/</id>
    <published>2019-10-16T02:08:01.170Z</published>
    <updated>2019-10-16T02:08:01.170Z</updated>
    
    <content type="html"><![CDATA[<p><strong>常见的移动端支付有：微信公众号内支付，第三方浏览器唤起微信app||支付宝app支付，微信小程序||支付宝小程序支付。</strong></p><p>由于微信公众号内只能使用微信JSAPI支付，以及一些其他的支付方式只能在特定的环境下进行，所以需要判断h5项目代码运行的环境选择对应的支付方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (/MicroMessenger/.test(window.navigator.userAgent)) &#123;</span><br><span class="line">    // 微信内</span><br><span class="line">&#125; else if (/AlipayClient/.test(window.navigator.userAgent)) &#123;</span><br><span class="line">    // 支付宝内</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // 第三方浏览器</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>由于微信支付需要用到用户的openid，进行支付前需要获取用户的openid。用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location.href = `https://open.weixin.qq.com/connect/oauth2/authorize?appid=$&#123;appid&#125;&amp;redirect_uri=$&#123;url&#125;&amp;response_type=code&amp;scope=snsapi_base&amp;state=drugstore#wechat_redirect`;</span><br><span class="line">// appid必填参数公众号的唯一标识</span><br><span class="line">// redirect_uri必填参数&quot;授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理&quot;</span><br><span class="line">// response_type必填参数返回类型，请填写code</span><br><span class="line">// scope必填参数&quot;应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）&quot;</span><br><span class="line">// state可选参数重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</span><br><span class="line">// #wechat_redirect必填参数无论直接打开还是做页面302重定向时候，必须带此参数</span><br></pre></td></tr></table></figure><p>网页授权获取用户openid接口文档<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html</a><br>注意：开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头；</p><hr><p>微信内H5调起支付：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function onBridgeReady()&#123;</span><br><span class="line">   WeixinJSBridge.invoke(</span><br><span class="line">      &apos;getBrandWCPayRequest&apos;, &#123;</span><br><span class="line">         &quot;appId&quot;:&quot;wx2421b1c4370ec43b&quot;,     //公众号名称，由商户传入     </span><br><span class="line">         &quot;timeStamp&quot;:&quot;1395712654&quot;,         //时间戳，自1970年以来的秒数     </span><br><span class="line">         &quot;nonceStr&quot;:&quot;e61463f8efa94090b1f366cccfbbb444&quot;, //随机串     </span><br><span class="line">         &quot;package&quot;:&quot;prepay_id=u802345jgfjsdfgsdg888&quot;,     </span><br><span class="line">         &quot;signType&quot;:&quot;MD5&quot;,         //微信签名方式：     </span><br><span class="line">         &quot;paySign&quot;:&quot;70EA570631E4BB79628FBCA90534C63FF7FADD89&quot; //微信签名 </span><br><span class="line">      &#125;,</span><br><span class="line">      function(res)&#123;</span><br><span class="line">      if(res.err_msg == &quot;get_brand_wcpay_request:ok&quot; )&#123;</span><br><span class="line">      // 使用以上方式判断前端返回,微信团队郑重提示：</span><br><span class="line">            //res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。</span><br><span class="line">      &#125; </span><br><span class="line">   &#125;); </span><br><span class="line">&#125;</span><br><span class="line">if (typeof WeixinJSBridge == &quot;undefined&quot;)&#123;</span><br><span class="line">   if( document.addEventListener )&#123;</span><br><span class="line">       document.addEventListener(&apos;WeixinJSBridgeReady&apos;, onBridgeReady, false);</span><br><span class="line">   &#125;else if (document.attachEvent)&#123;</span><br><span class="line">       document.attachEvent(&apos;WeixinJSBridgeReady&apos;, onBridgeReady); </span><br><span class="line">       document.attachEvent(&apos;onWeixinJSBridgeReady&apos;, onBridgeReady);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   onBridgeReady();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>微信内H5调起支付官网文档链接：<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6</a><br>补充：需要在微信商户平台（pay.weixin.qq.com）设置支付目录，以及设置授权域名。具体参考<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_3" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_3</a></p><hr><p>第三方浏览器唤起微信app支付：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//1、用户在商户侧完成下单，使用微信支付进行支付</span><br><span class="line">//2、由商户后台向微信支付发起下单请求（调用统一下单接口）注：交易类型trade_type=MWEB</span><br><span class="line">//3、统一下单接口返回支付相关参数给商户后台，如支付跳转url（参数名“mweb_url”），商户通过mweb_url调起微信支付中间页</span><br><span class="line">//4、中间页进行H5权限的校验，安全性检查（此处常见错误请见下文）</span><br><span class="line">//5、如支付成功，商户后台会接收到微信侧的异步通知</span><br><span class="line">//6、用户在微信支付收银台完成支付或取消支付,返回商户页面（默认为返回支付发起页面）</span><br><span class="line">//7、商户在展示页面，引导用户主动发起支付结果的查询</span><br><span class="line">//8,9、商户后台判断是否接到收微信侧的支付结果通知，如没有，后台调用我们的订单查询接口确认订单状态</span><br><span class="line">//10、展示最终的订单支付结果给用户</span><br><span class="line"></span><br><span class="line">// 一、回调页面</span><br><span class="line">//正常流程用户支付完成后会返回至发起支付的页面，如需返回至指定页面，则可以在MWEB_URL后拼接上redirect_url参数，来指定回调页面。</span><br><span class="line">location.href = mweb_url + &apos;&amp;redirect_url=&apos; + encodeURIComponent(&apos;回调页面地址&apos;);</span><br></pre></td></tr></table></figure><p>补充：一.需对redirect_url进行urlencode处理。  二.由于设置redirect_url后,回跳指定页面的操作可能发生在：1,微信支付中间页调起微信收银台后超过5秒 2,用户点击“取消支付“或支付完成后点“完成”按钮。因此无法保证页面回跳时，支付流程已结束，所以商户设置的redirect_url地址不能自动执行查单操作，应让用户去点击按钮触发查单操作。</p><hr><p>第三方浏览器唤起支付宝app支付：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//端页面以Form表单的形式发起请求，浏览器会自动跳转至支付宝的相关页面（一般是收银台或签约页面），用户在该页面完成相关业务操作后再回跳到商户指定页面。</span><br><span class="line">const form = res.data.data; // 返回的表单</span><br><span class="line">const div = document.createElement(&apos;div&apos;);</span><br><span class="line">div.id = &apos;alipay&apos;;</span><br><span class="line">div.innerHTML = form;</span><br><span class="line">document.body.appendChild(div);</span><br><span class="line">document.querySelector(&apos;#alipay&apos;).children[0].submit(); // 执行后会唤起支付宝</span><br></pre></td></tr></table></figure><p>支付宝h5支付官网文档链接：<a href="https://docs.open.alipay.com/203" target="_blank" rel="noopener">https://docs.open.alipay.com/203</a></p><hr><p>微信小程序支付：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wx.requestPayment(</span><br><span class="line">&#123;</span><br><span class="line">    &apos;timeStamp&apos;: &apos;&apos;, //时间戳从1970年1月1日00:00:00至今的秒数,即当前的时间</span><br><span class="line">    &apos;nonceStr&apos;: &apos;&apos;, //随机字符串，长度为32个字符以下。</span><br><span class="line">    &apos;package&apos;: &apos;&apos;, //统一下单接口返回的 prepay_id 参数值，提交格式如：prepay_id=*</span><br><span class="line">    &apos;signType&apos;: &apos;MD5&apos;, //签名类型，默认为MD5，支持HMAC-SHA256和MD5。注意此处需与统一下单的签名类型一致</span><br><span class="line">    &apos;paySign&apos;: &apos;&apos;, //签名,具体签名方案参见微信公众号支付帮助文档:https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=4_3;</span><br><span class="line">    &apos;success&apos;:function(res)&#123;</span><br><span class="line">        //接口调用成功的回调函数</span><br><span class="line">       //requestPayment:ok 调用支付成功</span><br><span class="line">       //requestPayment:fail cancel 用户取消支付</span><br><span class="line">       //requestPayment:fail (detail message)调用支付失败，其中 detail message 为后台返回的详细失败原因</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;fail&apos;:function(res)&#123;</span><br><span class="line">        //接口调用失败的回调函数</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;complete&apos;:function(res)&#123;</span><br><span class="line">        //接口调用结束的回调函数（调用成功、失败都会执行）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>微信小程序调起支付API官网文档链接：<a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&amp;index=5" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&amp;index=5</a><br>补充：程序访问商户服务都是通过HTTPS,开发部署的时候需要安装HTTPS服务器</p><hr><p>支付宝小程序支付：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">my.tradePay(&#123;</span><br><span class="line">  // 调用统一收单交易创建接口（alipay.trade.create），获得返回字段支付宝交易号trade_no</span><br><span class="line">  tradeNO: &apos;201711152100110410533667792&apos;,</span><br><span class="line">  success: (res) =&gt; &#123;</span><br><span class="line">       // res.resultCode === &apos;9000&apos;  订单处理成功。</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: (res) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// resultCode 结果码 </span><br><span class="line">// 9000 订单处理成功。</span><br><span class="line">// 8000 正在处理中。</span><br><span class="line">// 4000 订单处理失败。</span><br><span class="line">// 6001 用户中途取消。</span><br><span class="line">// 6002 网络连接出错。</span><br><span class="line">// 6004 处理结果未知（有可能已经成功），请查询商户订单列表中订单状态。</span><br><span class="line">// 99 用户点击忘记密码导致快捷界面退出（only iOS）。</span><br></pre></td></tr></table></figure><p>支付宝小程序调起支付API官网文档链接：<a href="https://docs.alipay.com/mini/api/openapi-pay" target="_blank" rel="noopener">https://docs.alipay.com/mini/api/openapi-pay</a><br>补充：小程序支付在小程序内不能通过扫码、条码、声波付等方式支付，只能唤起收银台进行支付；目前小程序支付还不支持免密支付。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;常见的移动端支付有：微信公众号内支付，第三方浏览器唤起微信app||支付宝app支付，微信小程序||支付宝小程序支付。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于微信公众号内只能使用微信JSAPI支付，以及一些其他的支付方式只能在特定的环境下进行，所以需要判断h5
      
    
    </summary>
    
      <category term="payment" scheme="https://haina.xgeeklab.com/categories/payment/"/>
    
    
      <category term="web" scheme="https://haina.xgeeklab.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>如何用Chrome调试微信web页面</title>
    <link href="https://haina.xgeeklab.com/2019/10/09/wechat-web-debug/"/>
    <id>https://haina.xgeeklab.com/2019/10/09/wechat-web-debug/</id>
    <published>2019-10-09T06:48:59.140Z</published>
    <updated>2019-10-09T06:48:59.140Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者： 张云峰</p></blockquote><h2 id="如何用Chrome调试微信web页面"><a href="#如何用Chrome调试微信web页面" class="headerlink" title="如何用Chrome调试微信web页面"></a>如何用Chrome调试微信web页面</h2><blockquote><p>微信调试有官方的微信开发者工具，这个工具很方便，但是有一个不方便就是调试公众号页面的时候，需要公众号给你授予开发者权限，<br>但是有的时候，你仅仅只是想调试页面的样式和一些dom结构，这个时候直接用chrome调试微信web页面就显得特别方便了。</p></blockquote><h3 id="步骤（此处仅仅在android手机上做了测试）"><a href="#步骤（此处仅仅在android手机上做了测试）" class="headerlink" title="步骤（此处仅仅在android手机上做了测试）"></a>步骤（此处仅仅在android手机上做了测试）</h3><h4 id="1-打开android手机的开发者模式-和-usb调试"><a href="#1-打开android手机的开发者模式-和-usb调试" class="headerlink" title="1. 打开android手机的开发者模式 和 usb调试"></a>1. 打开android手机的开发者模式 和 usb调试</h4><blockquote><p>每个手机打开方式都不一样，请自行搜索解决方案</p></blockquote><h4 id="2-打开chrome的-Remote-Devices"><a href="#2-打开chrome的-Remote-Devices" class="headerlink" title="2. 打开chrome的 Remote Devices"></a>2. 打开chrome的 <code>Remote Devices</code></h4><p><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456083/img/xfln0smfyyrmta2cgfbg.png" alt></p><h4 id="3-手机连接电脑"><a href="#3-手机连接电脑" class="headerlink" title="3. 手机连接电脑"></a>3. 手机连接电脑</h4><blockquote><p>手机连接电脑的时候，会弹出一个usb授权提示弹窗，点解<code>确定</code></p></blockquote><h4 id="4-在Chrome上的-Remote-Devices上查看链接的手机情况"><a href="#4-在Chrome上的-Remote-Devices上查看链接的手机情况" class="headerlink" title="4. 在Chrome上的 Remote Devices上查看链接的手机情况"></a>4. 在Chrome上的 <code>Remote Devices</code>上查看链接的手机情况</h4><p><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456090/img/sebny1fdphicnkfmisgx.png" alt></p><h4 id="5-调试手机上的页面"><a href="#5-调试手机上的页面" class="headerlink" title="5. 调试手机上的页面"></a>5. 调试手机上的页面</h4><blockquote><p>点击要调试的页面的右边的 <code>Inspect</code>按钮，就可以打开进行调试了。 <strong>但是这个时候我们发现仅仅只能看到浏览器的页面，没有看到微信的web页面</strong></p></blockquote><h4 id="6-手机微信打开-http-debugx5-qq-com-并勾选-打开TBS内核Inspector调试功能"><a href="#6-手机微信打开-http-debugx5-qq-com-并勾选-打开TBS内核Inspector调试功能" class="headerlink" title="6. 手机微信打开 http://debugx5.qq.com, 并勾选 打开TBS内核Inspector调试功能"></a>6. 手机微信打开 <a href="http://debugx5.qq.com" target="_blank" rel="noopener">http://debugx5.qq.com</a>, 并勾选 <code>打开TBS内核Inspector调试功能</code></h4><p><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456094/img/xa7exyod0yyavarj1w7f.jpg" alt></p><blockquote><p>勾选后会提示重启，点击确定就行</p></blockquote><h4 id="7-微信上打开要调试的web-页面，就可以在chrome中看到了"><a href="#7-微信上打开要调试的web-页面，就可以在chrome中看到了" class="headerlink" title="7. 微信上打开要调试的web 页面，就可以在chrome中看到了"></a>7. 微信上打开要调试的web 页面，就可以在chrome中看到了</h4><p><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456098/img/nz3ismpqljduymsinjq0.jpg" alt><br><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456100/img/fo5afmbyo4uvj7qgrgop.png" alt></p><h4 id="8-点击chrome中-inspect按钮及可以开始调试了"><a href="#8-点击chrome中-inspect按钮及可以开始调试了" class="headerlink" title="8. 点击chrome中 inspect按钮及可以开始调试了"></a>8. 点击chrome中 <code>inspect</code>按钮及可以开始调试了</h4><p><img src="https://res.cloudinary.com/zayfen/image/upload/v1566456105/img/irjrryrjdx9eq0rqg7pb.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作者： 张云峰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;如何用Chrome调试微信web页面&quot;&gt;&lt;a href=&quot;#如何用Chrome调试微信web页面&quot; class=&quot;headerlink&quot; title=&quot;如何用Chrome调试微信w
      
    
    </summary>
    
      <category term="web" scheme="https://haina.xgeeklab.com/categories/web/"/>
    
    
      <category term="wechat" scheme="https://haina.xgeeklab.com/tags/wechat/"/>
    
      <category term="chrome" scheme="https://haina.xgeeklab.com/tags/chrome/"/>
    
      <category term="debug" scheme="https://haina.xgeeklab.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Git常用操作总结</title>
    <link href="https://haina.xgeeklab.com/2019/09/11/git-learning/"/>
    <id>https://haina.xgeeklab.com/2019/09/11/git-learning/</id>
    <published>2019-09-10T19:10:12.000Z</published>
    <updated>2019-09-11T03:34:59.335Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者： 张云峰</p></blockquote><p><img src="https://res.cloudinary.com/zayfen/image/upload/v1568171685/img/l8yeyxvtfw6kplg1ci67.png" alt="https://res.cloudinary.com/zayfen/image/upload/v1568171685/img/l8yeyxvtfw6kplg1ci67.png"></p><h3 id="漂亮打印git-log"><a href="#漂亮打印git-log" class="headerlink" title="漂亮打印git log"></a>漂亮打印git log</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset'</span> --abbrev-commit --date=relative</span><br></pre></td></tr></table></figure><h3 id="添加修改或者新文件到待commit队列"><a href="#添加修改或者新文件到待commit队列" class="headerlink" title="添加修改或者新文件到待commit队列"></a>添加修改或者新文件到待commit队列</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### add 的文件是支持正则匹配的</span></span><br><span class="line">git add &lt;file(s)&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### add all changes to commiter queue</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看某个commit的修改内容</span></span><br><span class="line">git show &lt;commit-id&gt;</span><br><span class="line">git diff &lt;commit-id&gt;^!</span><br><span class="line"><span class="comment">##### e.g. git show d34ff657f5   git diff d34ff657f5^!</span></span><br></pre></td></tr></table></figure><h3 id="提交已添加的文件到本地仓库并创建一个新的版本"><a href="#提交已添加的文件到本地仓库并创建一个新的版本" class="headerlink" title="提交已添加的文件到本地仓库并创建一个新的版本"></a>提交已添加的文件到本地仓库并创建一个新的版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"commit message"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### also can combine git add &amp; git commit in one command</span></span><br><span class="line">git commit -m <span class="string">"commit message"</span> -a</span><br></pre></td></tr></table></figure><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### origin 是仓库名（默认就是origin），branch_name 是分支名</span></span><br><span class="line">git push origin &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="创建一个仓库"><a href="#创建一个仓库" class="headerlink" title="创建一个仓库"></a>创建一个仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### from existed repo </span></span><br><span class="line">git <span class="built_in">clone</span> &lt;repo-url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### create a new local repo</span></span><br><span class="line">git init [&lt;<span class="built_in">local</span>-directory&gt;]</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看本地和远端的分支</span></span><br><span class="line">git branch -va</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看本地分支和远程分支的对应关系</span></span><br><span class="line">git remote show &lt;repo-name&gt; <span class="comment">## git remote show origin</span></span><br></pre></td></tr></table></figure><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 仅仅创建一个新分支在本地</span></span><br><span class="line">git checkout &lt;new-branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 创建一个分支，并且将工作区切换到新创建的分支</span></span><br><span class="line">git checkout -b &lt;new-branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 拉取远程分支到本地，并切换分支</span></span><br><span class="line">git checkout -b &lt;<span class="built_in">local</span>-branch-name&gt; &lt;repo-name&gt;/&lt;remote-branch-name&gt;</span><br><span class="line"><span class="comment">#### e.g.: git checkout -b test origin/test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 把远程分支拉取到本地，不切换分支 (--tranck 选项现在是默认的了)</span></span><br><span class="line">git branch &lt;<span class="built_in">local</span>-branch-name&gt; &lt;repo-name&gt;/&lt;remote-branch-name&gt; [--track]</span><br><span class="line"><span class="comment">#### e.g.: git branch test origin/test</span></span><br></pre></td></tr></table></figure><h3 id="将本地分支推送到远程仓库"><a href="#将本地分支推送到远程仓库" class="headerlink" title="将本地分支推送到远程仓库"></a>将本地分支推送到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 远程分支不存在的情况</span></span><br><span class="line"><span class="comment">### remote-name: 通常是 origin； local-branch-name: 本地分支名； remote-branch-name: 要创建的远程分支名</span></span><br><span class="line"> git push &lt;remote-name&gt; &lt;<span class="built_in">local</span>-branch-name&gt;:&lt;remote-branch-name&gt;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">## 远程分支存在的情况（但是没有关联）</span></span><br><span class="line"> <span class="comment">### 首先关联本地分支和远程分支</span></span><br><span class="line"> git push -u &lt;remote-name&gt; &lt;branch-name&gt;</span><br><span class="line"> <span class="comment">#### or</span></span><br><span class="line"> git branch --<span class="built_in">set</span>-upstream-to=&lt;remote-name&gt;/&lt;remote-branch&gt; &lt;<span class="built_in">local</span>-branch&gt;</span><br></pre></td></tr></table></figure><h3 id="更新分支"><a href="#更新分支" class="headerlink" title="更新分支"></a>更新分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 跟新本地分支</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment">### 更新远程分支信息</span></span><br><span class="line">git remote update</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用远程的代码强制更新本地的代码 （强制本地代码和线上的一致）v1.0</span></span><br><span class="line">git checkout .</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用远程的分支代码强制更新本地的代码（强制本地代码和线上的一致）v2.0</span></span><br><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><h3 id="创建tag"><a href="#创建tag" class="headerlink" title="创建tag"></a>创建tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tag-name&gt; -m &lt;tag-message&gt;</span><br></pre></td></tr></table></figure><h3 id="删除tag"><a href="#删除tag" class="headerlink" title="删除tag"></a>删除tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 删除本地tag</span></span><br><span class="line">git tag -d &lt;tag-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 删除远端tag</span></span><br><span class="line">git push --delete &lt;repo-name&gt; &lt;tag-name&gt;</span><br><span class="line">or </span><br><span class="line">git push &lt;repo-name&gt; :refs/tags/&lt;tag-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### e.g.: git push --delete origin tag-r0</span></span><br><span class="line"><span class="comment">### e.g.: git push origin :refs/tags/tag-r0</span></span><br></pre></td></tr></table></figure><h3 id="查看tag"><a href="#查看tag" class="headerlink" title="查看tag"></a>查看tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 查看所有的tag</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看单个tag</span></span><br><span class="line">git tag -l &lt;tag-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看一个tag的具体信息</span></span><br><span class="line">git show &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><h3 id="推送tag到远程"><a href="#推送tag到远程" class="headerlink" title="推送tag到远程"></a>推送tag到远程</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## push single tag</span></span><br><span class="line">git push &lt;remote-name&gt; &lt;tag-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">## push all tags (not recommended)</span></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><h3 id="撤销工作目录所有的更改（包括新创建的文件）"><a href="#撤销工作目录所有的更改（包括新创建的文件）" class="headerlink" title="撤销工作目录所有的更改（包括新创建的文件）"></a>撤销工作目录所有的更改（包括新创建的文件）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard <span class="comment"># removes staged and working directory changes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## !! be very careful with these !!</span></span><br><span class="line"><span class="comment">## you may end up deleting what you don't want to</span></span><br><span class="line"><span class="comment">## read comments and manual.</span></span><br><span class="line">git clean -f -d <span class="comment"># remove untracked</span></span><br><span class="line">git clean -f -x -d <span class="comment"># CAUTION: as above but removes ignored files like config.</span></span><br><span class="line">git clean -fxd :/ <span class="comment"># CAUTION: as above, but cleans untracked and ignored files through the entire repo (without :/, the operation affects only the current directory)</span></span><br></pre></td></tr></table></figure><h3 id="git仓库存储账号密码，不用每次都输入账号密码（针对https协议的仓库地址）"><a href="#git仓库存储账号密码，不用每次都输入账号密码（针对https协议的仓库地址）" class="headerlink" title="git仓库存储账号密码，不用每次都输入账号密码（针对https协议的仓库地址）"></a>git仓库存储账号密码，不用每次都输入账号密码（针对https协议的仓库地址）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git config credential.helper store</span><br><span class="line">$ git push https://github.com/owner/repo.git</span><br><span class="line"></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: &lt;USERNAME&gt;</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">'https://USERNAME@github.com'</span>: &lt;PASSWORD&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行完上面的命令之后，以后所有的push都不再需要提交代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 如果想让此功能有个时间限制，可以这样</span></span><br><span class="line"></span><br><span class="line">git config --global credential.helper <span class="string">'cache --timeout 7200'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 7200秒后失效，push需要重新输入账号密码</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作者： 张云峰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/zayfen/image/upload/v1568171685/img/l8yeyxvtfw6kplg1ci67.p
      
    
    </summary>
    
      <category term="git" scheme="https://haina.xgeeklab.com/categories/git/"/>
    
    
      <category term="git" scheme="https://haina.xgeeklab.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Vue异步组件详解</title>
    <link href="https://haina.xgeeklab.com/2019/09/10/vue-asyn-component/"/>
    <id>https://haina.xgeeklab.com/2019/09/10/vue-asyn-component/</id>
    <published>2019-09-10T11:11:14.000Z</published>
    <updated>2019-09-10T12:18:25.792Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：丁文超</p></blockquote><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>  在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。</p><p>  异步组件的一个典型应用就是在配合<code>webpack</code>代码拆分时定义的<code>Vue</code>路由组件。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   name: <span class="string">'meetingList'</span>,</span><br><span class="line">   path: <span class="string">'list'</span>,</span><br><span class="line">   component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/meeting/list.vue'</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面代码<code>component</code>就被定义为函数返回一个<code>promise</code>，实质上就是一个异步组件。</p><h1 id="异步组件的解析"><a href="#异步组件的解析" class="headerlink" title="异步组件的解析"></a>异步组件的解析</h1><p>我们定义一个<code>AsyncComponent</code>的异步组件, 这个组件只有被访问到时才会加载</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AsyncComponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">components: &#123;</span><br><span class="line">  AsyncComponent: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./components/test-async-component/index.vue'</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上组件在<code>rednder</code>时组件时会调用<code>createElement</code>创建<code>vnode，</code>对于组件<code>createElement</code>又会调用<code>createComponent</code>在<code>createComponent</code>内初始异步组件的代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  Ctor: Class&lt;Component&gt; | Function | Object | void,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: ?VNodeData,</span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ?Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag?: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isUndef(Ctor)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Vue</span></span><br><span class="line">  <span class="keyword">const</span> baseCtor = context.$options._base</span><br><span class="line"></span><br><span class="line">  <span class="comment">// plain options object: turn it into a constructor</span></span><br><span class="line">  <span class="comment">// 对于异步组件传过来的是函数，所以不会执行Vue.extend</span></span><br><span class="line">  <span class="keyword">if</span> (isObject(Ctor)) &#123;</span><br><span class="line">    <span class="comment">// 调用Vue.extend</span></span><br><span class="line">    Ctor = baseCtor.extend(Ctor)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// async component</span></span><br><span class="line">  <span class="comment">// 异步组件</span></span><br><span class="line">  <span class="keyword">let</span> asyncFactory</span><br><span class="line">  <span class="comment">// 异步组件没经过 Vue.extend所以不存在Ctor.cid</span></span><br><span class="line">  <span class="keyword">if</span> (isUndef(Ctor.cid)) &#123;</span><br><span class="line">    asyncFactory = Ctor</span><br><span class="line">    Ctor = resolveAsyncComponent(asyncFactory, baseCtor)</span><br><span class="line">    <span class="keyword">if</span> (Ctor === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">// 异步组件未加载完毕，且没有loading组件创建占位节点</span></span><br><span class="line">      <span class="comment">// return a placeholder node for async component, which is rendered</span></span><br><span class="line">      <span class="comment">// as a comment node but preserves all the raw information for the node.</span></span><br><span class="line">      <span class="comment">// the information will be used for async server-rendering and hydration.</span></span><br><span class="line">      <span class="keyword">return</span> createAsyncPlaceholder(</span><br><span class="line">        asyncFactory,</span><br><span class="line">        data,</span><br><span class="line">        context,</span><br><span class="line">        children,</span><br><span class="line">        tag</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为此时传入<code>Ctor</code>是函数所以没有调用<code>Vue.extend</code>所以<code>Ctor</code>上不存在<code>cid</code>属性，所以会调用<code>resolveAsyncComponent</code>解析异步组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveAsyncComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  factory: Function,</span></span></span><br><span class="line"><span class="function"><span class="params">  baseCtor: Class&lt;Component&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Class</span>&lt;<span class="title">Component</span>&gt; | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isTrue(factory.error) &amp;&amp; isDef(factory.errorComp)) &#123;</span><br><span class="line">      <span class="comment">// 如果当前出错，返回错误组件</span></span><br><span class="line">    <span class="keyword">return</span> factory.errorComp</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isDef(factory.resolved)) &#123;</span><br><span class="line">    <span class="comment">// 如果已经被缓存了直接返回</span></span><br><span class="line">    <span class="keyword">return</span> factory.resolved</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 当前渲染Vue实例</span></span><br><span class="line">  <span class="keyword">const</span> owner = currentRenderingInstance</span><br><span class="line">  <span class="keyword">if</span> (owner &amp;&amp; isDef(factory.owners) &amp;&amp; factory.owners.indexOf(owner) === <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">// already pending</span></span><br><span class="line">    factory.owners.push(owner)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isTrue(factory.loading) &amp;&amp; isDef(factory.loadingComp)) &#123;</span><br><span class="line">      <span class="comment">// 返回loadding组件</span></span><br><span class="line">    <span class="keyword">return</span> factory.loadingComp</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (owner &amp;&amp; !isDef(factory.owners)) &#123;</span><br><span class="line">    <span class="keyword">const</span> owners = factory.owners = [owner]</span><br><span class="line">    <span class="keyword">let</span> sync = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">let</span> timerLoading = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> timerTimeout = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    ;<span class="function">(<span class="params">owner: any</span>).<span class="params">$on</span>(<span class="params"><span class="string">'hook:destroyed'</span>, (</span>) =&gt;</span> remove(owners, owner))</span><br><span class="line">    <span class="comment">// 在组件发生变化时触发强制更新</span></span><br><span class="line">    <span class="keyword">const</span> forceRender = <span class="function">(<span class="params">renderCompleted: boolean</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = owners.length; i &lt; l; i++) &#123;</span><br><span class="line">        (owners[i]: any).$forceUpdate()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (renderCompleted) &#123;</span><br><span class="line">        owners.length = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 清除loading的计时器</span></span><br><span class="line">        <span class="keyword">if</span> (timerLoading !== <span class="literal">null</span>) &#123;</span><br><span class="line">          clearTimeout(timerLoading)</span><br><span class="line">          timerLoading = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清除timeout计时器</span></span><br><span class="line">        <span class="keyword">if</span> (timerTimeout !== <span class="literal">null</span>) &#123;</span><br><span class="line">          clearTimeout(timerTimeout)</span><br><span class="line">          timerTimeout = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// once确保传入的函数只执行一次，因为第一次执行后会缓存执行结果，所以函数只需要执行一次</span></span><br><span class="line">    <span class="keyword">const</span> resolve = once(<span class="function">(<span class="params">res: <span class="built_in">Object</span> | Class&lt;Component&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// cache resolved</span></span><br><span class="line">      factory.resolved = ensureCtor(res, baseCtor)</span><br><span class="line">      <span class="comment">// invoke callbacks only if this is not a synchronous resolve</span></span><br><span class="line">      <span class="comment">// (async resolves are shimmed as synchronous during SSR)</span></span><br><span class="line">      <span class="keyword">if</span> (!sync) &#123;</span><br><span class="line">        <span class="comment">// 组件发生变化触发强制更新</span></span><br><span class="line">        forceRender(<span class="literal">true</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        owners.length = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// reject函数出错时调用</span></span><br><span class="line">    <span class="keyword">const</span> reject = once(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">`Failed to resolve async component: <span class="subst">$&#123;<span class="built_in">String</span>(factory)&#125;</span>`</span> +</span><br><span class="line">        (reason ? <span class="string">`\nReason: <span class="subst">$&#123;reason&#125;</span>`</span> : <span class="string">''</span>)</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> (isDef(factory.errorComp)) &#123;</span><br><span class="line">        factory.error = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 发生错误需要显示错误组件，强制更新</span></span><br><span class="line">        forceRender(<span class="literal">true</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 执行异步组件函数</span></span><br><span class="line">    <span class="comment">// 对于普通的函数异步组件，在这一步就会返回结果</span></span><br><span class="line">    <span class="keyword">const</span> res = factory(resolve, reject)</span><br><span class="line">    <span class="comment">// 如果返回的是Promise</span></span><br><span class="line">    <span class="keyword">if</span> (isObject(res)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isPromise(res)) &#123;</span><br><span class="line">        <span class="comment">// () =&gt; Promise</span></span><br><span class="line">        <span class="keyword">if</span> (isUndef(factory.resolved)) &#123;</span><br><span class="line">          <span class="comment">// 在promise的成功回调内传入resolve， 和reject</span></span><br><span class="line">          res.then(resolve, reject)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPromise(res.component)) &#123;</span><br><span class="line">        <span class="comment">// 高级的异步组件范湖一个对象，对象包含属性</span></span><br><span class="line">        res.component.then(resolve, reject)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDef(res.error)) &#123;</span><br><span class="line">          <span class="comment">// 缓存错误组件</span></span><br><span class="line">          factory.errorComp = ensureCtor(res.error, baseCtor)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDef(res.loading)) &#123;</span><br><span class="line">          <span class="comment">// 缓存loading组件</span></span><br><span class="line">          factory.loadingComp = ensureCtor(res.loading, baseCtor)</span><br><span class="line">          <span class="keyword">if</span> (res.delay === <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="comment">// 设置延迟0秒</span></span><br><span class="line">            factory.loading = <span class="literal">true</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 默认延迟200秒</span></span><br><span class="line">            timerLoading = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">              timerLoading = <span class="literal">null</span></span><br><span class="line">              <span class="keyword">if</span> (isUndef(factory.resolved) &amp;&amp; isUndef(factory.error)) &#123;</span><br><span class="line">                factory.loading = <span class="literal">true</span></span><br><span class="line">                forceRender(<span class="literal">false</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, res.delay || <span class="number">200</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDef(res.timeout)) &#123;</span><br><span class="line">          <span class="comment">// 如果设置了超时时间，超时报错</span></span><br><span class="line">          timerTimeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            timerTimeout = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">if</span> (isUndef(factory.resolved)) &#123;</span><br><span class="line">              reject(</span><br><span class="line">                process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">                  ? <span class="string">`timeout (<span class="subst">$&#123;res.timeout&#125;</span>ms)`</span></span><br><span class="line">                  : <span class="literal">null</span></span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, res.timeout)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sync = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// return in case resolved synchronously</span></span><br><span class="line">    <span class="comment">// 最后判断如果当前正在loading返回loading组件</span></span><br><span class="line">    <span class="comment">// 否则返回异步加载成功的组件</span></span><br><span class="line">    <span class="keyword">return</span> factory.loading</span><br><span class="line">      ? factory.loadingComp</span><br><span class="line">      : factory.resolved</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureCtor</span> (<span class="params">comp: any, base</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    comp.__esModule ||</span><br><span class="line">    (hasSymbol &amp;&amp; comp[<span class="built_in">Symbol</span>.toStringTag] === <span class="string">'Module'</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    comp = comp.default</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isObject(comp)</span><br><span class="line">    <span class="comment">// 调用extend生成构造函数</span></span><br><span class="line">    ? base.extend(comp)</span><br><span class="line">    : comp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码总共有三种情况，分别代表着异步组件的三种写法。</p><h1 id="工厂函数异步组件"><a href="#工厂函数异步组件" class="headerlink" title="工厂函数异步组件"></a>工厂函数异步组件</h1><p>对于普通函数异步组件会直接在<code>resolve</code>函数中缓存异步组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂函数异组件</span></span><br><span class="line">Vue.component(<span class="string">'async-example'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 向 `resolve` 回调传递组件定义</span></span><br><span class="line">    resolve(&#123;</span><br><span class="line">      template: <span class="string">'&lt;div&gt;I am async!&lt;/div&gt;'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 传入的resolve函数</span></span><br><span class="line"><span class="keyword">const</span> resolve = once(<span class="function">(<span class="params">res: <span class="built_in">Object</span> | Class&lt;Component&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// cache resolved</span></span><br><span class="line">    factory.resolved = ensureCtor(res, baseCtor)</span><br><span class="line">    <span class="comment">// invoke callbacks only if this is not a synchronous resolve</span></span><br><span class="line">    <span class="comment">// (async resolves are shimmed as synchronous during SSR)</span></span><br><span class="line">    <span class="keyword">if</span> (!sync) &#123;</span><br><span class="line">    <span class="comment">// 组件发生变化触发强制更新</span></span><br><span class="line">    forceRender(<span class="literal">true</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    owners.length = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Promsie组件"><a href="#Promsie组件" class="headerlink" title="Promsie组件"></a>Promsie组件</h1><p>除了工厂函数异步组件也是返回一个Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步组件返回一个Promise</span></span><br><span class="line">Vue.component(</span><br><span class="line">  <span class="string">'async-webpack-example'</span>,</span><br><span class="line">  <span class="comment">// 这个 `import` 函数会返回一个 `Promise` 对象。</span></span><br><span class="line">  () =&gt; <span class="keyword">import</span>(<span class="string">'./my-async-component'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = factory(resolve, reject)</span><br><span class="line">    <span class="comment">// 如果返回的是Promise</span></span><br><span class="line"><span class="keyword">if</span> (isObject(res)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isPromise(res)) &#123;</span><br><span class="line">        <span class="comment">// () =&gt; Promise</span></span><br><span class="line">        <span class="keyword">if</span> (isUndef(factory.resolved)) &#123;</span><br><span class="line">        <span class="comment">// 在promise的成功回调内传入resolve， 和reject</span></span><br><span class="line">        res.then(resolve, reject)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断返回的是不是对象之后判断是否是<code>Promise</code>如果是<code>Promise</code>则传入<code>resolve</code>和<code>reject</code>解析异步组件，这里的<code>resolve</code>和<code>reject</code>就是前文定义的。</p><h1 id="高级异步组件"><a href="#高级异步组件" class="headerlink" title="高级异步组件"></a>高级异步组件</h1><p>除此之外异步组件也可以返回一个对象包含下列选项</p><ul><li><code>component</code> 异步组件</li><li><code>loading</code> 异步组件加载过程中的<code>loading</code>组件</li><li><code>error</code>    加载失败时使用的组件</li><li><code>delay</code> 展示加载时组件的延时时间。默认值是 200 (毫秒)</li><li><code>timeout</code>  如果提供了超时时间且组件加载也超时了，则使用加载失败时使用的组件。默认值是：<code>Infinity</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步组件返回一个对象</span></span><br><span class="line"><span class="keyword">const</span> AsyncComponent = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="comment">// 需要加载的组件 (应该是一个 `Promise` 对象)</span></span><br><span class="line">  component: <span class="keyword">import</span>(<span class="string">'./MyComponent.vue'</span>),</span><br><span class="line">  <span class="comment">// 异步组件加载时使用的组件</span></span><br><span class="line">  loading: LoadingComponent,</span><br><span class="line">  <span class="comment">// 加载失败时使用的组件</span></span><br><span class="line">  error: ErrorComponent,</span><br><span class="line">  <span class="comment">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span></span><br><span class="line">  delay: <span class="number">200</span>,</span><br><span class="line">  <span class="comment">// 如果提供了超时时间且组件加载也超时了，</span></span><br><span class="line">  <span class="comment">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span></span><br><span class="line">  timeout: <span class="number">3000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 解析高级异步组件</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isObject(res)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isPromise(res)) &#123;</span><br><span class="line">        <span class="comment">// () =&gt; Promise</span></span><br><span class="line">        <span class="keyword">if</span> (isUndef(factory.resolved)) &#123;</span><br><span class="line">          <span class="comment">// 在promise的成功回调内传入resolve， 和reject</span></span><br><span class="line">          res.then(resolve, reject)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPromise(res.component)) &#123;</span><br><span class="line">        <span class="comment">// 这个分支处理高级异步组件</span></span><br><span class="line">        <span class="comment">// 高级的异步组件范湖一个对象，对象包含属性</span></span><br><span class="line">        res.component.then(resolve, reject)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDef(res.error)) &#123;</span><br><span class="line">          <span class="comment">// 缓存错误组件</span></span><br><span class="line">          factory.errorComp = ensureCtor(res.error, baseCtor)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDef(res.loading)) &#123;</span><br><span class="line">          <span class="comment">// 缓存loading组件</span></span><br><span class="line">          factory.loadingComp = ensureCtor(res.loading, baseCtor)</span><br><span class="line">          <span class="keyword">if</span> (res.delay === <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="comment">// 设置延迟0秒, 立即显示loading组件</span></span><br><span class="line">            factory.loading = <span class="literal">true</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 默认延迟200秒</span></span><br><span class="line">            timerLoading = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">              timerLoading = <span class="literal">null</span></span><br><span class="line">              <span class="keyword">if</span> (isUndef(factory.resolved) &amp;&amp; isUndef(factory.error)) &#123;</span><br><span class="line">                factory.loading = <span class="literal">true</span></span><br><span class="line">                forceRender(<span class="literal">false</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, res.delay || <span class="number">200</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDef(res.timeout)) &#123;</span><br><span class="line">          <span class="comment">// 如果设置了超时时间，超时报错</span></span><br><span class="line">          timerTimeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            timerTimeout = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">if</span> (isUndef(factory.resolved)) &#123;</span><br><span class="line">              reject(</span><br><span class="line">                process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">                  ? <span class="string">`timeout (<span class="subst">$&#123;res.timeout&#125;</span>ms)`</span></span><br><span class="line">                  : <span class="literal">null</span></span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, res.timeout)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由上面我们可以看到一个异步组件有下面几种状态</p><ul><li><code>loading</code> 当前组件正在加载。</li><li><code>error</code> 组件加载失败，如果有设置超时时间超时未加载成功也会把状态置为<code>error</code>。</li><li><code>done</code> 组件加载完成。</li></ul><p>注意每次状态改变都会调用<code>forceRender</code>触发强制更新，因为状态改变显示的组件就会有变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件发生变化时触发强制更新</span></span><br><span class="line"><span class="comment">// 就是遍历调用实例的$forceUpdate</span></span><br><span class="line"><span class="keyword">const</span> forceRender = <span class="function">(<span class="params">renderCompleted: boolean</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = owners.length; i &lt; l; i++) &#123;</span><br><span class="line">    (owners[i]: any).$forceUpdate()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (renderCompleted) &#123;</span><br><span class="line">    owners.length = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 清除计时器</span></span><br><span class="line">    <span class="keyword">if</span> (timerLoading !== <span class="literal">null</span>) &#123;</span><br><span class="line">      clearTimeout(timerLoading)</span><br><span class="line">      timerLoading = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timerTimeout !== <span class="literal">null</span>) &#123;</span><br><span class="line">      clearTimeout(timerTimeout)</span><br><span class="line">      timerTimeout = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里再次回到<code>createComponet</code>, 当组件还未加载完成，或者设置了<code>delay</code>，则此时<code>resolveAsyncComponent</code>返回了<code>undefined</code>,此时调用<code>createAsyncPlaceholder</code>创建一个占位的<code>vnode</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isUndef(Ctor.cid)) &#123;</span><br><span class="line">   asyncFactory = Ctor</span><br><span class="line">   Ctor = resolveAsyncComponent(asyncFactory, baseCtor)</span><br><span class="line">   <span class="keyword">if</span> (Ctor === <span class="literal">undefined</span>) &#123;</span><br><span class="line">     <span class="comment">// 异步组件未加载完毕，且没有loading组件创建占位节点</span></span><br><span class="line">     <span class="comment">// return a placeholder node for async component, which is rendered</span></span><br><span class="line">     <span class="comment">// as a comment node but preserves all the raw information for the node.</span></span><br><span class="line">     <span class="comment">// the information will be used for async server-rendering and hydration.</span></span><br><span class="line">     <span class="keyword">return</span> createAsyncPlaceholder(</span><br><span class="line">       asyncFactory,</span><br><span class="line">       data,</span><br><span class="line">       context,</span><br><span class="line">       children,</span><br><span class="line">       tag</span><br><span class="line">     )</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createAsyncPlaceholder</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  factory: Function,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: ?VNodeData,</span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ?Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag: ?string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> node = createEmptyVNode()</span><br><span class="line">  node.asyncFactory = factory</span><br><span class="line">  node.asyncMeta = &#123; data, context, children, tag &#125;</span><br><span class="line">  <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>createAsyncPlaceholder</code>先创建一个空节点，之后将一系列上下文信息缓存在<code>node.asyncMeta</code>中。</p><p>由以上分析看到<code>Vue</code>解析异步组件的过程已经很清楚了, 需要注意的是异步组件每次状态改变都会触发强制更新，因为状态变了组件就变了，通过强制更新执行组件更新。</p><p><img src="https://i.loli.net/2019/09/10/rDnhVolvOusk83t.png" alt="异步组件流程.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作者：丁文超&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;  在大型应用中，我们可能需要将应用分割成小一些的代码块，
      
    
    </summary>
    
      <category term="web" scheme="https://haina.xgeeklab.com/categories/web/"/>
    
    
      <category term="web" scheme="https://haina.xgeeklab.com/tags/web/"/>
    
      <category term="vue" scheme="https://haina.xgeeklab.com/tags/vue/"/>
    
      <category term="async" scheme="https://haina.xgeeklab.com/tags/async/"/>
    
      <category term="component" scheme="https://haina.xgeeklab.com/tags/component/"/>
    
  </entry>
  
</feed>
